# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_msg/armpap_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class armpap_msg(genpy.Message):
  _md5sum = "040948e8a15d597e107b2f1c93f40e51"
  _type = "robots_msg/armpap_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string type 		# type of robot  ”ARMPAP”
string ip 		# address of the robot ESP8866
uint32 port 		# Port for comunication
uint8 id 		# identyti of robot a uint8_t
uint8 inst_before 	# the last instruction runner 
uint16 base_speed 	# speed base
int16 base_target 	# base target position
int16 base_current 	# base current position
uint16 left_speed 	# speed left
int16 left_target 	# left target position
int16 left_current 	# left current position
uint16 right_speed 	# speed right
int16 right_target 	# right target position
int16 right_current 	# right current position
uint8 color  		# color of the light 0--17
uint8 gripper 		# status of the gripper 0 open, 1 close
string status 		# "Completed" or "Error tipo 3"
"""
  __slots__ = ['type','ip','port','id','inst_before','base_speed','base_target','base_current','left_speed','left_target','left_current','right_speed','right_target','right_current','color','gripper','status']
  _slot_types = ['string','string','uint32','uint8','uint8','uint16','int16','int16','uint16','int16','int16','uint16','int16','int16','uint8','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,ip,port,id,inst_before,base_speed,base_target,base_current,left_speed,left_target,left_current,right_speed,right_target,right_current,color,gripper,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(armpap_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.ip is None:
        self.ip = ''
      if self.port is None:
        self.port = 0
      if self.id is None:
        self.id = 0
      if self.inst_before is None:
        self.inst_before = 0
      if self.base_speed is None:
        self.base_speed = 0
      if self.base_target is None:
        self.base_target = 0
      if self.base_current is None:
        self.base_current = 0
      if self.left_speed is None:
        self.left_speed = 0
      if self.left_target is None:
        self.left_target = 0
      if self.left_current is None:
        self.left_current = 0
      if self.right_speed is None:
        self.right_speed = 0
      if self.right_target is None:
        self.right_target = 0
      if self.right_current is None:
        self.right_current = 0
      if self.color is None:
        self.color = 0
      if self.gripper is None:
        self.gripper = 0
      if self.status is None:
        self.status = ''
    else:
      self.type = ''
      self.ip = ''
      self.port = 0
      self.id = 0
      self.inst_before = 0
      self.base_speed = 0
      self.base_target = 0
      self.base_current = 0
      self.left_speed = 0
      self.left_target = 0
      self.left_current = 0
      self.right_speed = 0
      self.right_target = 0
      self.right_current = 0
      self.color = 0
      self.gripper = 0
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2BH2hH2hH2h2B().pack(_x.port, _x.id, _x.inst_before, _x.base_speed, _x.base_target, _x.base_current, _x.left_speed, _x.left_target, _x.left_current, _x.right_speed, _x.right_target, _x.right_current, _x.color, _x.gripper))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.port, _x.id, _x.inst_before, _x.base_speed, _x.base_target, _x.base_current, _x.left_speed, _x.left_target, _x.left_current, _x.right_speed, _x.right_target, _x.right_current, _x.color, _x.gripper,) = _get_struct_I2BH2hH2hH2h2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2BH2hH2hH2h2B().pack(_x.port, _x.id, _x.inst_before, _x.base_speed, _x.base_target, _x.base_current, _x.left_speed, _x.left_target, _x.left_current, _x.right_speed, _x.right_target, _x.right_current, _x.color, _x.gripper))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.port, _x.id, _x.inst_before, _x.base_speed, _x.base_target, _x.base_current, _x.left_speed, _x.left_target, _x.left_current, _x.right_speed, _x.right_target, _x.right_current, _x.color, _x.gripper,) = _get_struct_I2BH2hH2hH2h2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2BH2hH2hH2h2B = None
def _get_struct_I2BH2hH2hH2h2B():
    global _struct_I2BH2hH2hH2h2B
    if _struct_I2BH2hH2hH2h2B is None:
        _struct_I2BH2hH2hH2h2B = struct.Struct("<I2BH2hH2hH2h2B")
    return _struct_I2BH2hH2hH2h2B
