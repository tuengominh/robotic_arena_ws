# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_msg/eco_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robots_msg.msg

class eco_msg(genpy.Message):
  _md5sum = "11c8a7147be0b5a11f6c147bd471ccda"
  _type = "robots_msg/eco_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string type # type of robot “ECOLOGY20”
string ip # address of the robot ESP8866
uint32 port # Port for comunication
uint8 id # identyti of robot a uint8_t
uint8 inst_before # the last instruction runner 
float32 battery # % of the battery
float32 tempe # temperature sensor
uint16 line0 # line sensor
uint16 line1 
robots_msg/motor motor1 # motor_left in ecology
robots_msg/motor motor2 # motor_right in ecology
robots_msg/jevois camera # Aruco info
robots_msg/lidar sensor_lidar # only one value or 
string status # "Completed" or "Error tipo 1"

================================================================================
MSG: robots_msg/motor
uint8 speed # 0..255 to ecology20 and 0..180 to tanke20
uint8 dir # 0 stop 1:CW 2:CCW
int16 pos # position 

================================================================================
MSG: robots_msg/jevois
string type
uint8 id
int16 targx #coordinate x
int16 targy #coordinate y
int16 targw # weight of fiducial
int16 targh # hight of fiducial

================================================================================
MSG: robots_msg/lidar
int16 position
int16 range
"""
  __slots__ = ['type','ip','port','id','inst_before','battery','tempe','line0','line1','motor1','motor2','camera','sensor_lidar','status']
  _slot_types = ['string','string','uint32','uint8','uint8','float32','float32','uint16','uint16','robots_msg/motor','robots_msg/motor','robots_msg/jevois','robots_msg/lidar','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,ip,port,id,inst_before,battery,tempe,line0,line1,motor1,motor2,camera,sensor_lidar,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(eco_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.ip is None:
        self.ip = ''
      if self.port is None:
        self.port = 0
      if self.id is None:
        self.id = 0
      if self.inst_before is None:
        self.inst_before = 0
      if self.battery is None:
        self.battery = 0.
      if self.tempe is None:
        self.tempe = 0.
      if self.line0 is None:
        self.line0 = 0
      if self.line1 is None:
        self.line1 = 0
      if self.motor1 is None:
        self.motor1 = robots_msg.msg.motor()
      if self.motor2 is None:
        self.motor2 = robots_msg.msg.motor()
      if self.camera is None:
        self.camera = robots_msg.msg.jevois()
      if self.sensor_lidar is None:
        self.sensor_lidar = robots_msg.msg.lidar()
      if self.status is None:
        self.status = ''
    else:
      self.type = ''
      self.ip = ''
      self.port = 0
      self.id = 0
      self.inst_before = 0
      self.battery = 0.
      self.tempe = 0.
      self.line0 = 0
      self.line1 = 0
      self.motor1 = robots_msg.msg.motor()
      self.motor2 = robots_msg.msg.motor()
      self.camera = robots_msg.msg.jevois()
      self.sensor_lidar = robots_msg.msg.lidar()
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2B2f2H2Bh2Bh().pack(_x.port, _x.id, _x.inst_before, _x.battery, _x.tempe, _x.line0, _x.line1, _x.motor1.speed, _x.motor1.dir, _x.motor1.pos, _x.motor2.speed, _x.motor2.dir, _x.motor2.pos))
      _x = self.camera.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6h().pack(_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.sensor_lidar.position, _x.sensor_lidar.range))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor1 is None:
        self.motor1 = robots_msg.msg.motor()
      if self.motor2 is None:
        self.motor2 = robots_msg.msg.motor()
      if self.camera is None:
        self.camera = robots_msg.msg.jevois()
      if self.sensor_lidar is None:
        self.sensor_lidar = robots_msg.msg.lidar()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.port, _x.id, _x.inst_before, _x.battery, _x.tempe, _x.line0, _x.line1, _x.motor1.speed, _x.motor1.dir, _x.motor1.pos, _x.motor2.speed, _x.motor2.dir, _x.motor2.pos,) = _get_struct_I2B2f2H2Bh2Bh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera.type = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.sensor_lidar.position, _x.sensor_lidar.range,) = _get_struct_B6h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2B2f2H2Bh2Bh().pack(_x.port, _x.id, _x.inst_before, _x.battery, _x.tempe, _x.line0, _x.line1, _x.motor1.speed, _x.motor1.dir, _x.motor1.pos, _x.motor2.speed, _x.motor2.dir, _x.motor2.pos))
      _x = self.camera.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6h().pack(_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.sensor_lidar.position, _x.sensor_lidar.range))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor1 is None:
        self.motor1 = robots_msg.msg.motor()
      if self.motor2 is None:
        self.motor2 = robots_msg.msg.motor()
      if self.camera is None:
        self.camera = robots_msg.msg.jevois()
      if self.sensor_lidar is None:
        self.sensor_lidar = robots_msg.msg.lidar()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.port, _x.id, _x.inst_before, _x.battery, _x.tempe, _x.line0, _x.line1, _x.motor1.speed, _x.motor1.dir, _x.motor1.pos, _x.motor2.speed, _x.motor2.dir, _x.motor2.pos,) = _get_struct_I2B2f2H2Bh2Bh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera.type = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.sensor_lidar.position, _x.sensor_lidar.range,) = _get_struct_B6h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6h = None
def _get_struct_B6h():
    global _struct_B6h
    if _struct_B6h is None:
        _struct_B6h = struct.Struct("<B6h")
    return _struct_B6h
_struct_I2B2f2H2Bh2Bh = None
def _get_struct_I2B2f2H2Bh2Bh():
    global _struct_I2B2f2H2Bh2Bh
    if _struct_I2B2f2H2Bh2Bh is None:
        _struct_I2B2f2H2Bh2Bh = struct.Struct("<I2B2f2H2Bh2Bh")
    return _struct_I2B2f2H2Bh2Bh
