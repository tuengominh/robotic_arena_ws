# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_msg/arm_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robots_msg.msg

class arm_msg(genpy.Message):
  _md5sum = "01914fc38e80d47bed67675890824f7b"
  _type = "robots_msg/arm_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string type # type of robot  ”ARM20”
string ip # address of the robot ESP8866
uint32 port # Port for comunication
uint8 id # identyti of robot a uint8_t
uint8 inst_before # the last instruction runner 
float32 battery # % of the battery
robots_msg/xl320 servo0 # only arm20
robots_msg/xl320 servo1 # only arm20
robots_msg/xl320 servo2 # only arm20
robots_msg/xl320 servo3 # only arm20
robots_msg/xl320 servo4 # only arm20
robots_msg/xl320 servo5 # only arm20
robots_msg/jevois camera # Aruco info
uint8 magnet            # status magnet 1 ON 0 OFF
string status # "Completed" or "Error tipo 3"
================================================================================
MSG: robots_msg/xl320
uint8  ID
uint8  LED
uint16 speed
uint16 Goal_Position
uint16 Present_Position

================================================================================
MSG: robots_msg/jevois
string type
uint8 id
int16 targx #coordinate x
int16 targy #coordinate y
int16 targw # weight of fiducial
int16 targh # hight of fiducial
"""
  __slots__ = ['type','ip','port','id','inst_before','battery','servo0','servo1','servo2','servo3','servo4','servo5','camera','magnet','status']
  _slot_types = ['string','string','uint32','uint8','uint8','float32','robots_msg/xl320','robots_msg/xl320','robots_msg/xl320','robots_msg/xl320','robots_msg/xl320','robots_msg/xl320','robots_msg/jevois','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,ip,port,id,inst_before,battery,servo0,servo1,servo2,servo3,servo4,servo5,camera,magnet,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arm_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.ip is None:
        self.ip = ''
      if self.port is None:
        self.port = 0
      if self.id is None:
        self.id = 0
      if self.inst_before is None:
        self.inst_before = 0
      if self.battery is None:
        self.battery = 0.
      if self.servo0 is None:
        self.servo0 = robots_msg.msg.xl320()
      if self.servo1 is None:
        self.servo1 = robots_msg.msg.xl320()
      if self.servo2 is None:
        self.servo2 = robots_msg.msg.xl320()
      if self.servo3 is None:
        self.servo3 = robots_msg.msg.xl320()
      if self.servo4 is None:
        self.servo4 = robots_msg.msg.xl320()
      if self.servo5 is None:
        self.servo5 = robots_msg.msg.xl320()
      if self.camera is None:
        self.camera = robots_msg.msg.jevois()
      if self.magnet is None:
        self.magnet = 0
      if self.status is None:
        self.status = ''
    else:
      self.type = ''
      self.ip = ''
      self.port = 0
      self.id = 0
      self.inst_before = 0
      self.battery = 0.
      self.servo0 = robots_msg.msg.xl320()
      self.servo1 = robots_msg.msg.xl320()
      self.servo2 = robots_msg.msg.xl320()
      self.servo3 = robots_msg.msg.xl320()
      self.servo4 = robots_msg.msg.xl320()
      self.servo5 = robots_msg.msg.xl320()
      self.camera = robots_msg.msg.jevois()
      self.magnet = 0
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H().pack(_x.port, _x.id, _x.inst_before, _x.battery, _x.servo0.ID, _x.servo0.LED, _x.servo0.speed, _x.servo0.Goal_Position, _x.servo0.Present_Position, _x.servo1.ID, _x.servo1.LED, _x.servo1.speed, _x.servo1.Goal_Position, _x.servo1.Present_Position, _x.servo2.ID, _x.servo2.LED, _x.servo2.speed, _x.servo2.Goal_Position, _x.servo2.Present_Position, _x.servo3.ID, _x.servo3.LED, _x.servo3.speed, _x.servo3.Goal_Position, _x.servo3.Present_Position, _x.servo4.ID, _x.servo4.LED, _x.servo4.speed, _x.servo4.Goal_Position, _x.servo4.Present_Position, _x.servo5.ID, _x.servo5.LED, _x.servo5.speed, _x.servo5.Goal_Position, _x.servo5.Present_Position))
      _x = self.camera.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4hB().pack(_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.magnet))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.servo0 is None:
        self.servo0 = robots_msg.msg.xl320()
      if self.servo1 is None:
        self.servo1 = robots_msg.msg.xl320()
      if self.servo2 is None:
        self.servo2 = robots_msg.msg.xl320()
      if self.servo3 is None:
        self.servo3 = robots_msg.msg.xl320()
      if self.servo4 is None:
        self.servo4 = robots_msg.msg.xl320()
      if self.servo5 is None:
        self.servo5 = robots_msg.msg.xl320()
      if self.camera is None:
        self.camera = robots_msg.msg.jevois()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.port, _x.id, _x.inst_before, _x.battery, _x.servo0.ID, _x.servo0.LED, _x.servo0.speed, _x.servo0.Goal_Position, _x.servo0.Present_Position, _x.servo1.ID, _x.servo1.LED, _x.servo1.speed, _x.servo1.Goal_Position, _x.servo1.Present_Position, _x.servo2.ID, _x.servo2.LED, _x.servo2.speed, _x.servo2.Goal_Position, _x.servo2.Present_Position, _x.servo3.ID, _x.servo3.LED, _x.servo3.speed, _x.servo3.Goal_Position, _x.servo3.Present_Position, _x.servo4.ID, _x.servo4.LED, _x.servo4.speed, _x.servo4.Goal_Position, _x.servo4.Present_Position, _x.servo5.ID, _x.servo5.LED, _x.servo5.speed, _x.servo5.Goal_Position, _x.servo5.Present_Position,) = _get_struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera.type = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.magnet,) = _get_struct_B4hB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H().pack(_x.port, _x.id, _x.inst_before, _x.battery, _x.servo0.ID, _x.servo0.LED, _x.servo0.speed, _x.servo0.Goal_Position, _x.servo0.Present_Position, _x.servo1.ID, _x.servo1.LED, _x.servo1.speed, _x.servo1.Goal_Position, _x.servo1.Present_Position, _x.servo2.ID, _x.servo2.LED, _x.servo2.speed, _x.servo2.Goal_Position, _x.servo2.Present_Position, _x.servo3.ID, _x.servo3.LED, _x.servo3.speed, _x.servo3.Goal_Position, _x.servo3.Present_Position, _x.servo4.ID, _x.servo4.LED, _x.servo4.speed, _x.servo4.Goal_Position, _x.servo4.Present_Position, _x.servo5.ID, _x.servo5.LED, _x.servo5.speed, _x.servo5.Goal_Position, _x.servo5.Present_Position))
      _x = self.camera.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4hB().pack(_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.magnet))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.servo0 is None:
        self.servo0 = robots_msg.msg.xl320()
      if self.servo1 is None:
        self.servo1 = robots_msg.msg.xl320()
      if self.servo2 is None:
        self.servo2 = robots_msg.msg.xl320()
      if self.servo3 is None:
        self.servo3 = robots_msg.msg.xl320()
      if self.servo4 is None:
        self.servo4 = robots_msg.msg.xl320()
      if self.servo5 is None:
        self.servo5 = robots_msg.msg.xl320()
      if self.camera is None:
        self.camera = robots_msg.msg.jevois()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.port, _x.id, _x.inst_before, _x.battery, _x.servo0.ID, _x.servo0.LED, _x.servo0.speed, _x.servo0.Goal_Position, _x.servo0.Present_Position, _x.servo1.ID, _x.servo1.LED, _x.servo1.speed, _x.servo1.Goal_Position, _x.servo1.Present_Position, _x.servo2.ID, _x.servo2.LED, _x.servo2.speed, _x.servo2.Goal_Position, _x.servo2.Present_Position, _x.servo3.ID, _x.servo3.LED, _x.servo3.speed, _x.servo3.Goal_Position, _x.servo3.Present_Position, _x.servo4.ID, _x.servo4.LED, _x.servo4.speed, _x.servo4.Goal_Position, _x.servo4.Present_Position, _x.servo5.ID, _x.servo5.LED, _x.servo5.speed, _x.servo5.Goal_Position, _x.servo5.Present_Position,) = _get_struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera.type = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.camera.id, _x.camera.targx, _x.camera.targy, _x.camera.targw, _x.camera.targh, _x.magnet,) = _get_struct_B4hB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4hB = None
def _get_struct_B4hB():
    global _struct_B4hB
    if _struct_B4hB is None:
        _struct_B4hB = struct.Struct("<B4hB")
    return _struct_B4hB
_struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H = None
def _get_struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H():
    global _struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H
    if _struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H is None:
        _struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H = struct.Struct("<I2Bf2B3H2B3H2B3H2B3H2B3H2B3H")
    return _struct_I2Bf2B3H2B3H2B3H2B3H2B3H2B3H
