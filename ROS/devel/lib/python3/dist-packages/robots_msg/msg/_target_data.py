# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_msg/target_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class target_data(genpy.Message):
  _md5sum = "a34b54ff877258b4705ff283256911e9"
  _type = "robots_msg/target_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 range_l  # left ir sensor
uint16 range_c  # laser sensor
uint16 range_r  # right ir sensor 
uint16 n_food
uint16 n_water
string targ_id
string targ_type
float32 targ_dist
float32 targ_x
"""
  __slots__ = ['range_l','range_c','range_r','n_food','n_water','targ_id','targ_type','targ_dist','targ_x']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','string','string','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       range_l,range_c,range_r,n_food,n_water,targ_id,targ_type,targ_dist,targ_x

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(target_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.range_l is None:
        self.range_l = 0
      if self.range_c is None:
        self.range_c = 0
      if self.range_r is None:
        self.range_r = 0
      if self.n_food is None:
        self.n_food = 0
      if self.n_water is None:
        self.n_water = 0
      if self.targ_id is None:
        self.targ_id = ''
      if self.targ_type is None:
        self.targ_type = ''
      if self.targ_dist is None:
        self.targ_dist = 0.
      if self.targ_x is None:
        self.targ_x = 0.
    else:
      self.range_l = 0
      self.range_c = 0
      self.range_r = 0
      self.n_food = 0
      self.n_water = 0
      self.targ_id = ''
      self.targ_type = ''
      self.targ_dist = 0.
      self.targ_x = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5H().pack(_x.range_l, _x.range_c, _x.range_r, _x.n_food, _x.n_water))
      _x = self.targ_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.targ_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.targ_dist, _x.targ_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.range_l, _x.range_c, _x.range_r, _x.n_food, _x.n_water,) = _get_struct_5H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targ_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.targ_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targ_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.targ_type = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.targ_dist, _x.targ_x,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5H().pack(_x.range_l, _x.range_c, _x.range_r, _x.n_food, _x.n_water))
      _x = self.targ_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.targ_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.targ_dist, _x.targ_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.range_l, _x.range_c, _x.range_r, _x.n_food, _x.n_water,) = _get_struct_5H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targ_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.targ_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targ_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.targ_type = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.targ_dist, _x.targ_x,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_5H = None
def _get_struct_5H():
    global _struct_5H
    if _struct_5H is None:
        _struct_5H = struct.Struct("<5H")
    return _struct_5H
