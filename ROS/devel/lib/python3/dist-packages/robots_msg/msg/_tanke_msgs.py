# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_msg/tanke_msgs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robots_msg.msg

class tanke_msgs(genpy.Message):
  _md5sum = "fa6b09dbb6438940f27323d40a64c654"
  _type = "robots_msg/tanke_msgs"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string type  # type of robot “TANKE20”
string ip  # address of the robot ESP8866
uint32 port  # port for communication
uint8 id  # uint8_t id of the robot
uint8 inst_before  # the last instruction runner 
float32 battery  # % of the battery
uint16 range_c  # laser sensor
int16 compas  # heading
uint8 motor1  # 0 : stop, 1 : CW, 2 : CCW FL
uint8 motor3  # 0 : stop, 1 : CW, 2 : CCW BL
uint8 motor2  # 0 : stop, 1 : CW, 2 : CCW FR
uint8 motor4  # 0 : stop, 1 : CW, 2 : CCW BR
robots_msg/camera jevois  # Aruco info
robots_msg/plat plat
string status  # "Completed" or "Error type 2"

================================================================================
MSG: robots_msg/camera
int8 detect  # 1 : detect, 0 : non detect    
uint8 id  # id of fiducial
int16 targx  # coordinate x
int16 targy  # coordinate y
string data  # all info in string

================================================================================
MSG: robots_msg/plat
string action  # "MOVING_UP", "MOVING_DOWN", "STOP"
uint8 status  # 1 : up, 0 : down
"""
  __slots__ = ['type','ip','port','id','inst_before','battery','range_c','compas','motor1','motor3','motor2','motor4','jevois','plat','status']
  _slot_types = ['string','string','uint32','uint8','uint8','float32','uint16','int16','uint8','uint8','uint8','uint8','robots_msg/camera','robots_msg/plat','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,ip,port,id,inst_before,battery,range_c,compas,motor1,motor3,motor2,motor4,jevois,plat,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tanke_msgs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.ip is None:
        self.ip = ''
      if self.port is None:
        self.port = 0
      if self.id is None:
        self.id = 0
      if self.inst_before is None:
        self.inst_before = 0
      if self.battery is None:
        self.battery = 0.
      if self.range_c is None:
        self.range_c = 0
      if self.compas is None:
        self.compas = 0
      if self.motor1 is None:
        self.motor1 = 0
      if self.motor3 is None:
        self.motor3 = 0
      if self.motor2 is None:
        self.motor2 = 0
      if self.motor4 is None:
        self.motor4 = 0
      if self.jevois is None:
        self.jevois = robots_msg.msg.camera()
      if self.plat is None:
        self.plat = robots_msg.msg.plat()
      if self.status is None:
        self.status = ''
    else:
      self.type = ''
      self.ip = ''
      self.port = 0
      self.id = 0
      self.inst_before = 0
      self.battery = 0.
      self.range_c = 0
      self.compas = 0
      self.motor1 = 0
      self.motor3 = 0
      self.motor2 = 0
      self.motor4 = 0
      self.jevois = robots_msg.msg.camera()
      self.plat = robots_msg.msg.plat()
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2BfHh4BbB2h().pack(_x.port, _x.id, _x.inst_before, _x.battery, _x.range_c, _x.compas, _x.motor1, _x.motor3, _x.motor2, _x.motor4, _x.jevois.detect, _x.jevois.id, _x.jevois.targx, _x.jevois.targy))
      _x = self.jevois.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.plat.action
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.plat.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.jevois is None:
        self.jevois = robots_msg.msg.camera()
      if self.plat is None:
        self.plat = robots_msg.msg.plat()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.port, _x.id, _x.inst_before, _x.battery, _x.range_c, _x.compas, _x.motor1, _x.motor3, _x.motor2, _x.motor4, _x.jevois.detect, _x.jevois.id, _x.jevois.targx, _x.jevois.targy,) = _get_struct_I2BfHh4BbB2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.jevois.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.jevois.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plat.action = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plat.action = str[start:end]
      start = end
      end += 1
      (self.plat.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2BfHh4BbB2h().pack(_x.port, _x.id, _x.inst_before, _x.battery, _x.range_c, _x.compas, _x.motor1, _x.motor3, _x.motor2, _x.motor4, _x.jevois.detect, _x.jevois.id, _x.jevois.targx, _x.jevois.targy))
      _x = self.jevois.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.plat.action
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.plat.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.jevois is None:
        self.jevois = robots_msg.msg.camera()
      if self.plat is None:
        self.plat = robots_msg.msg.plat()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ip = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.port, _x.id, _x.inst_before, _x.battery, _x.range_c, _x.compas, _x.motor1, _x.motor3, _x.motor2, _x.motor4, _x.jevois.detect, _x.jevois.id, _x.jevois.targx, _x.jevois.targy,) = _get_struct_I2BfHh4BbB2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.jevois.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.jevois.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.plat.action = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.plat.action = str[start:end]
      start = end
      end += 1
      (self.plat.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I2BfHh4BbB2h = None
def _get_struct_I2BfHh4BbB2h():
    global _struct_I2BfHh4BbB2h
    if _struct_I2BfHh4BbB2h is None:
        _struct_I2BfHh4BbB2h = struct.Struct("<I2BfHh4BbB2h")
    return _struct_I2BfHh4BbB2h
