// Generated by gencpp from file robots_msg/plat.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_PLAT_H
#define ROBOTS_MSG_MESSAGE_PLAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct plat_
{
  typedef plat_<ContainerAllocator> Type;

  plat_()
    : action()
    , status(0)  {
    }
  plat_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robots_msg::plat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::plat_<ContainerAllocator> const> ConstPtr;

}; // struct plat_

typedef ::robots_msg::plat_<std::allocator<void> > plat;

typedef boost::shared_ptr< ::robots_msg::plat > platPtr;
typedef boost::shared_ptr< ::robots_msg::plat const> platConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::plat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::plat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::plat_<ContainerAllocator1> & lhs, const ::robots_msg::plat_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::plat_<ContainerAllocator1> & lhs, const ::robots_msg::plat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::plat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::plat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::plat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::plat_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::plat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::plat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::plat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "317c41d290a095d0de64922627caccb7";
  }

  static const char* value(const ::robots_msg::plat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x317c41d290a095d0ULL;
  static const uint64_t static_value2 = 0xde64922627caccb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::plat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/plat";
  }

  static const char* value(const ::robots_msg::plat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::plat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action  # \"MOVING_UP\", \"MOVING_DOWN\", \"STOP\"\n"
"uint8 status  # 1 : up, 0 : down\n"
;
  }

  static const char* value(const ::robots_msg::plat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::plat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::plat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::plat_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_PLAT_H
