// Generated by gencpp from file robots_msg/jevois.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_JEVOIS_H
#define ROBOTS_MSG_MESSAGE_JEVOIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct jevois_
{
  typedef jevois_<ContainerAllocator> Type;

  jevois_()
    : type()
    , id(0)
    , targx(0)
    , targy(0)
    , targw(0)
    , targh(0)  {
    }
  jevois_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , id(0)
    , targx(0)
    , targy(0)
    , targw(0)
    , targh(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef uint8_t _id_type;
  _id_type id;

   typedef int16_t _targx_type;
  _targx_type targx;

   typedef int16_t _targy_type;
  _targy_type targy;

   typedef int16_t _targw_type;
  _targw_type targw;

   typedef int16_t _targh_type;
  _targh_type targh;





  typedef boost::shared_ptr< ::robots_msg::jevois_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::jevois_<ContainerAllocator> const> ConstPtr;

}; // struct jevois_

typedef ::robots_msg::jevois_<std::allocator<void> > jevois;

typedef boost::shared_ptr< ::robots_msg::jevois > jevoisPtr;
typedef boost::shared_ptr< ::robots_msg::jevois const> jevoisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::jevois_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::jevois_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::jevois_<ContainerAllocator1> & lhs, const ::robots_msg::jevois_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.id == rhs.id &&
    lhs.targx == rhs.targx &&
    lhs.targy == rhs.targy &&
    lhs.targw == rhs.targw &&
    lhs.targh == rhs.targh;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::jevois_<ContainerAllocator1> & lhs, const ::robots_msg::jevois_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::jevois_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::jevois_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::jevois_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::jevois_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::jevois_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::jevois_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::jevois_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e3dfb3b0880c65b6e878e5b7b7188e0";
  }

  static const char* value(const ::robots_msg::jevois_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e3dfb3b0880c65bULL;
  static const uint64_t static_value2 = 0x6e878e5b7b7188e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::jevois_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/jevois";
  }

  static const char* value(const ::robots_msg::jevois_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::jevois_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"uint8 id\n"
"int16 targx  # coordinate x\n"
"int16 targy  # coordinate y\n"
"int16 targw  # weight of fiducial\n"
"int16 targh  # height of fiducial\n"
;
  }

  static const char* value(const ::robots_msg::jevois_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::jevois_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.targx);
      stream.next(m.targy);
      stream.next(m.targw);
      stream.next(m.targh);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jevois_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::jevois_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::jevois_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "targx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.targx);
    s << indent << "targy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.targy);
    s << indent << "targw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.targw);
    s << indent << "targh: ";
    Printer<int16_t>::stream(s, indent + "  ", v.targh);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_JEVOIS_H
