// Generated by gencpp from file robots_msg/cmd_robot_msg.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_CMD_ROBOT_MSG_H
#define ROBOTS_MSG_MESSAGE_CMD_ROBOT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct cmd_robot_msg_
{
  typedef cmd_robot_msg_<ContainerAllocator> Type;

  cmd_robot_msg_()
    : ip()
    , port(0)
    , id(0)
    , instruction(0)
    , op1(0)
    , op2(0)
    , op3(0)
    , op4(0)
    , op5(0)  {
    }
  cmd_robot_msg_(const ContainerAllocator& _alloc)
    : ip(_alloc)
    , port(0)
    , id(0)
    , instruction(0)
    , op1(0)
    , op2(0)
    , op3(0)
    , op4(0)
    , op5(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint32_t _port_type;
  _port_type port;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _instruction_type;
  _instruction_type instruction;

   typedef uint8_t _op1_type;
  _op1_type op1;

   typedef uint8_t _op2_type;
  _op2_type op2;

   typedef uint8_t _op3_type;
  _op3_type op3;

   typedef uint8_t _op4_type;
  _op4_type op4;

   typedef uint8_t _op5_type;
  _op5_type op5;





  typedef boost::shared_ptr< ::robots_msg::cmd_robot_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::cmd_robot_msg_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_robot_msg_

typedef ::robots_msg::cmd_robot_msg_<std::allocator<void> > cmd_robot_msg;

typedef boost::shared_ptr< ::robots_msg::cmd_robot_msg > cmd_robot_msgPtr;
typedef boost::shared_ptr< ::robots_msg::cmd_robot_msg const> cmd_robot_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::cmd_robot_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::cmd_robot_msg_<ContainerAllocator1> & lhs, const ::robots_msg::cmd_robot_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.id == rhs.id &&
    lhs.instruction == rhs.instruction &&
    lhs.op1 == rhs.op1 &&
    lhs.op2 == rhs.op2 &&
    lhs.op3 == rhs.op3 &&
    lhs.op4 == rhs.op4 &&
    lhs.op5 == rhs.op5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::cmd_robot_msg_<ContainerAllocator1> & lhs, const ::robots_msg::cmd_robot_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::cmd_robot_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::cmd_robot_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::cmd_robot_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c4d416eead0976d4457c7ea5840b85f";
  }

  static const char* value(const ::robots_msg::cmd_robot_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c4d416eead0976dULL;
  static const uint64_t static_value2 = 0x4457c7ea5840b85fULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/cmd_robot_msg";
  }

  static const char* value(const ::robots_msg::cmd_robot_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ip # address of the robot ESP8866\n"
"uint32 port # Port for comunication\n"
"uint8 id # identyti of robot a uint8_t\n"
"uint8 instruction # instruction \n"
"uint8 op1\n"
"uint8 op2 \n"
"uint8 op3\n"
"uint8 op4\n"
"uint8 op5\n"
"\n"
;
  }

  static const char* value(const ::robots_msg::cmd_robot_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.id);
      stream.next(m.instruction);
      stream.next(m.op1);
      stream.next(m.op2);
      stream.next(m.op3);
      stream.next(m.op4);
      stream.next(m.op5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_robot_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::cmd_robot_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::cmd_robot_msg_<ContainerAllocator>& v)
  {
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "instruction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.instruction);
    s << indent << "op1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op1);
    s << indent << "op2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op2);
    s << indent << "op3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op3);
    s << indent << "op4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op4);
    s << indent << "op5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_CMD_ROBOT_MSG_H
