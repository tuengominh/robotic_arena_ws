// Generated by gencpp from file robots_msg/eco_msg.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_ECO_MSG_H
#define ROBOTS_MSG_MESSAGE_ECO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robots_msg/motor.h>
#include <robots_msg/motor.h>
#include <robots_msg/jevois.h>
#include <robots_msg/lidar.h>

namespace robots_msg
{
template <class ContainerAllocator>
struct eco_msg_
{
  typedef eco_msg_<ContainerAllocator> Type;

  eco_msg_()
    : type()
    , ip()
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , tempe(0.0)
    , line0(0)
    , line1(0)
    , motor1()
    , motor2()
    , camera()
    , sensor_lidar()
    , status()  {
    }
  eco_msg_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , ip(_alloc)
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , tempe(0.0)
    , line0(0)
    , line1(0)
    , motor1(_alloc)
    , motor2(_alloc)
    , camera(_alloc)
    , sensor_lidar(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint32_t _port_type;
  _port_type port;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _inst_before_type;
  _inst_before_type inst_before;

   typedef float _battery_type;
  _battery_type battery;

   typedef float _tempe_type;
  _tempe_type tempe;

   typedef uint16_t _line0_type;
  _line0_type line0;

   typedef uint16_t _line1_type;
  _line1_type line1;

   typedef  ::robots_msg::motor_<ContainerAllocator>  _motor1_type;
  _motor1_type motor1;

   typedef  ::robots_msg::motor_<ContainerAllocator>  _motor2_type;
  _motor2_type motor2;

   typedef  ::robots_msg::jevois_<ContainerAllocator>  _camera_type;
  _camera_type camera;

   typedef  ::robots_msg::lidar_<ContainerAllocator>  _sensor_lidar_type;
  _sensor_lidar_type sensor_lidar;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robots_msg::eco_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::eco_msg_<ContainerAllocator> const> ConstPtr;

}; // struct eco_msg_

typedef ::robots_msg::eco_msg_<std::allocator<void> > eco_msg;

typedef boost::shared_ptr< ::robots_msg::eco_msg > eco_msgPtr;
typedef boost::shared_ptr< ::robots_msg::eco_msg const> eco_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::eco_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::eco_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::eco_msg_<ContainerAllocator1> & lhs, const ::robots_msg::eco_msg_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.id == rhs.id &&
    lhs.inst_before == rhs.inst_before &&
    lhs.battery == rhs.battery &&
    lhs.tempe == rhs.tempe &&
    lhs.line0 == rhs.line0 &&
    lhs.line1 == rhs.line1 &&
    lhs.motor1 == rhs.motor1 &&
    lhs.motor2 == rhs.motor2 &&
    lhs.camera == rhs.camera &&
    lhs.sensor_lidar == rhs.sensor_lidar &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::eco_msg_<ContainerAllocator1> & lhs, const ::robots_msg::eco_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::eco_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::eco_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::eco_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::eco_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::eco_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::eco_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::eco_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11c8a7147be0b5a11f6c147bd471ccda";
  }

  static const char* value(const ::robots_msg::eco_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11c8a7147be0b5a1ULL;
  static const uint64_t static_value2 = 0x1f6c147bd471ccdaULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::eco_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/eco_msg";
  }

  static const char* value(const ::robots_msg::eco_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::eco_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type # type of robot “ECOLOGY20”\n"
"string ip # address of the robot ESP8866\n"
"uint32 port # Port for comunication\n"
"uint8 id # identyti of robot a uint8_t\n"
"uint8 inst_before # the last instruction runner \n"
"float32 battery # % of the battery\n"
"float32 tempe # temperature sensor\n"
"uint16 line0 # line sensor\n"
"uint16 line1 \n"
"robots_msg/motor motor1 # motor_left in ecology\n"
"robots_msg/motor motor2 # motor_right in ecology\n"
"robots_msg/jevois camera # Aruco info\n"
"robots_msg/lidar sensor_lidar # only one value or \n"
"string status # \"Completed\" or \"Error tipo 1\"\n"
"\n"
"================================================================================\n"
"MSG: robots_msg/motor\n"
"uint8 speed # 0..255 to ecology20 and 0..180 to tanke20\n"
"uint8 dir # 0 stop 1:CW 2:CCW\n"
"int16 pos # position \n"
"\n"
"================================================================================\n"
"MSG: robots_msg/jevois\n"
"string type\n"
"uint8 id\n"
"int16 targx #coordinate x\n"
"int16 targy #coordinate y\n"
"int16 targw # weight of fiducial\n"
"int16 targh # hight of fiducial\n"
"\n"
"================================================================================\n"
"MSG: robots_msg/lidar\n"
"int16 position\n"
"int16 range\n"
;
  }

  static const char* value(const ::robots_msg::eco_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::eco_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.id);
      stream.next(m.inst_before);
      stream.next(m.battery);
      stream.next(m.tempe);
      stream.next(m.line0);
      stream.next(m.line1);
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.camera);
      stream.next(m.sensor_lidar);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eco_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::eco_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::eco_msg_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "inst_before: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inst_before);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "tempe: ";
    Printer<float>::stream(s, indent + "  ", v.tempe);
    s << indent << "line0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.line0);
    s << indent << "line1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.line1);
    s << indent << "motor1: ";
    s << std::endl;
    Printer< ::robots_msg::motor_<ContainerAllocator> >::stream(s, indent + "  ", v.motor1);
    s << indent << "motor2: ";
    s << std::endl;
    Printer< ::robots_msg::motor_<ContainerAllocator> >::stream(s, indent + "  ", v.motor2);
    s << indent << "camera: ";
    s << std::endl;
    Printer< ::robots_msg::jevois_<ContainerAllocator> >::stream(s, indent + "  ", v.camera);
    s << indent << "sensor_lidar: ";
    s << std::endl;
    Printer< ::robots_msg::lidar_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_lidar);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_ECO_MSG_H
