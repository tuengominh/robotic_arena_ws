// Generated by gencpp from file robots_msg/armpap_msgs.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_ARMPAP_MSGS_H
#define ROBOTS_MSG_MESSAGE_ARMPAP_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct armpap_msgs_
{
  typedef armpap_msgs_<ContainerAllocator> Type;

  armpap_msgs_()
    : type()
    , ip()
    , port(0)
    , id(0)
    , inst_before(0)
    , base_speed(0)
    , base_target(0)
    , base_current(0)
    , left_speed(0)
    , left_target(0)
    , left_current(0)
    , right_speed(0)
    , right_target(0)
    , right_current(0)
    , color(0)
    , gripper(0)
    , status()  {
    }
  armpap_msgs_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , ip(_alloc)
    , port(0)
    , id(0)
    , inst_before(0)
    , base_speed(0)
    , base_target(0)
    , base_current(0)
    , left_speed(0)
    , left_target(0)
    , left_current(0)
    , right_speed(0)
    , right_target(0)
    , right_current(0)
    , color(0)
    , gripper(0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint32_t _port_type;
  _port_type port;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _inst_before_type;
  _inst_before_type inst_before;

   typedef uint16_t _base_speed_type;
  _base_speed_type base_speed;

   typedef int16_t _base_target_type;
  _base_target_type base_target;

   typedef int16_t _base_current_type;
  _base_current_type base_current;

   typedef uint16_t _left_speed_type;
  _left_speed_type left_speed;

   typedef int16_t _left_target_type;
  _left_target_type left_target;

   typedef int16_t _left_current_type;
  _left_current_type left_current;

   typedef uint16_t _right_speed_type;
  _right_speed_type right_speed;

   typedef int16_t _right_target_type;
  _right_target_type right_target;

   typedef int16_t _right_current_type;
  _right_current_type right_current;

   typedef uint8_t _color_type;
  _color_type color;

   typedef uint8_t _gripper_type;
  _gripper_type gripper;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robots_msg::armpap_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::armpap_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct armpap_msgs_

typedef ::robots_msg::armpap_msgs_<std::allocator<void> > armpap_msgs;

typedef boost::shared_ptr< ::robots_msg::armpap_msgs > armpap_msgsPtr;
typedef boost::shared_ptr< ::robots_msg::armpap_msgs const> armpap_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::armpap_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::armpap_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::armpap_msgs_<ContainerAllocator1> & lhs, const ::robots_msg::armpap_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.id == rhs.id &&
    lhs.inst_before == rhs.inst_before &&
    lhs.base_speed == rhs.base_speed &&
    lhs.base_target == rhs.base_target &&
    lhs.base_current == rhs.base_current &&
    lhs.left_speed == rhs.left_speed &&
    lhs.left_target == rhs.left_target &&
    lhs.left_current == rhs.left_current &&
    lhs.right_speed == rhs.right_speed &&
    lhs.right_target == rhs.right_target &&
    lhs.right_current == rhs.right_current &&
    lhs.color == rhs.color &&
    lhs.gripper == rhs.gripper &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::armpap_msgs_<ContainerAllocator1> & lhs, const ::robots_msg::armpap_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::armpap_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::armpap_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::armpap_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::armpap_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::armpap_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::armpap_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::armpap_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "040948e8a15d597e107b2f1c93f40e51";
  }

  static const char* value(const ::robots_msg::armpap_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x040948e8a15d597eULL;
  static const uint64_t static_value2 = 0x107b2f1c93f40e51ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::armpap_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/armpap_msgs";
  }

  static const char* value(const ::robots_msg::armpap_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::armpap_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type  # type of robot ”ARMPAP”\n"
"string ip  # address of the robot ESP8866\n"
"uint32 port  # port for comunication\n"
"uint8 id  # uint8_t id of the robot \n"
"uint8 inst_before  # the last instruction runner \n"
"uint16 base_speed  # base speed\n"
"int16 base_target  # base target position\n"
"int16 base_current  # base current position\n"
"uint16 left_speed  # left speed \n"
"int16 left_target  # left target position\n"
"int16 left_current  # left current position\n"
"uint16 right_speed  # right speed\n"
"int16 right_target  # right target position\n"
"int16 right_current  # right current position\n"
"uint8 color  # color of the light 0..17\n"
"uint8 gripper  # 0 : open, 1 : close\n"
"string status  # \"Completed\" or \"Error type 3\"\n"
;
  }

  static const char* value(const ::robots_msg::armpap_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::armpap_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.id);
      stream.next(m.inst_before);
      stream.next(m.base_speed);
      stream.next(m.base_target);
      stream.next(m.base_current);
      stream.next(m.left_speed);
      stream.next(m.left_target);
      stream.next(m.left_current);
      stream.next(m.right_speed);
      stream.next(m.right_target);
      stream.next(m.right_current);
      stream.next(m.color);
      stream.next(m.gripper);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armpap_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::armpap_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::armpap_msgs_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "inst_before: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inst_before);
    s << indent << "base_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.base_speed);
    s << indent << "base_target: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_target);
    s << indent << "base_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_current);
    s << indent << "left_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left_speed);
    s << indent << "left_target: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_target);
    s << indent << "left_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_current);
    s << indent << "right_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_speed);
    s << indent << "right_target: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_target);
    s << indent << "right_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_current);
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
    s << indent << "gripper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_ARMPAP_MSGS_H
