// Generated by gencpp from file robots_msg/motor.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_MOTOR_H
#define ROBOTS_MSG_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct motor_
{
  typedef motor_<ContainerAllocator> Type;

  motor_()
    : speed(0)
    , dir(0)
    , pos(0)  {
    }
  motor_(const ContainerAllocator& _alloc)
    : speed(0)
    , dir(0)
    , pos(0)  {
  (void)_alloc;
    }



   typedef uint8_t _speed_type;
  _speed_type speed;

   typedef uint8_t _dir_type;
  _dir_type dir;

   typedef int16_t _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::robots_msg::motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::motor_<ContainerAllocator> const> ConstPtr;

}; // struct motor_

typedef ::robots_msg::motor_<std::allocator<void> > motor;

typedef boost::shared_ptr< ::robots_msg::motor > motorPtr;
typedef boost::shared_ptr< ::robots_msg::motor const> motorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::motor_<ContainerAllocator1> & lhs, const ::robots_msg::motor_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.dir == rhs.dir &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::motor_<ContainerAllocator1> & lhs, const ::robots_msg::motor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fa8cbcf1466cb2e33624b31d90f1f01";
  }

  static const char* value(const ::robots_msg::motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fa8cbcf1466cb2eULL;
  static const uint64_t static_value2 = 0x33624b31d90f1f01ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/motor";
  }

  static const char* value(const ::robots_msg::motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 speed  # 0..255 for ecology20 and 0..180 for tanke20\n"
"uint8 dir  # 0 : stop, 1 : CW, 2 : CCW\n"
"int16 pos  # position \n"
;
  }

  static const char* value(const ::robots_msg::motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.dir);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::motor_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed);
    s << indent << "dir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dir);
    s << indent << "pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_MOTOR_H
