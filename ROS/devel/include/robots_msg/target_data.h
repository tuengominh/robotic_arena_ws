// Generated by gencpp from file robots_msg/target_data.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_TARGET_DATA_H
#define ROBOTS_MSG_MESSAGE_TARGET_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct target_data_
{
  typedef target_data_<ContainerAllocator> Type;

  target_data_()
    : range_l(0)
    , range_c(0)
    , range_r(0)
    , n_food(0)
    , n_water(0)
    , targ_id()
    , targ_type()
    , targ_dist(0.0)
    , targ_x(0.0)  {
    }
  target_data_(const ContainerAllocator& _alloc)
    : range_l(0)
    , range_c(0)
    , range_r(0)
    , n_food(0)
    , n_water(0)
    , targ_id(_alloc)
    , targ_type(_alloc)
    , targ_dist(0.0)
    , targ_x(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _range_l_type;
  _range_l_type range_l;

   typedef uint16_t _range_c_type;
  _range_c_type range_c;

   typedef uint16_t _range_r_type;
  _range_r_type range_r;

   typedef uint16_t _n_food_type;
  _n_food_type n_food;

   typedef uint16_t _n_water_type;
  _n_water_type n_water;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _targ_id_type;
  _targ_id_type targ_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _targ_type_type;
  _targ_type_type targ_type;

   typedef float _targ_dist_type;
  _targ_dist_type targ_dist;

   typedef float _targ_x_type;
  _targ_x_type targ_x;





  typedef boost::shared_ptr< ::robots_msg::target_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::target_data_<ContainerAllocator> const> ConstPtr;

}; // struct target_data_

typedef ::robots_msg::target_data_<std::allocator<void> > target_data;

typedef boost::shared_ptr< ::robots_msg::target_data > target_dataPtr;
typedef boost::shared_ptr< ::robots_msg::target_data const> target_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::target_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::target_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::target_data_<ContainerAllocator1> & lhs, const ::robots_msg::target_data_<ContainerAllocator2> & rhs)
{
  return lhs.range_l == rhs.range_l &&
    lhs.range_c == rhs.range_c &&
    lhs.range_r == rhs.range_r &&
    lhs.n_food == rhs.n_food &&
    lhs.n_water == rhs.n_water &&
    lhs.targ_id == rhs.targ_id &&
    lhs.targ_type == rhs.targ_type &&
    lhs.targ_dist == rhs.targ_dist &&
    lhs.targ_x == rhs.targ_x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::target_data_<ContainerAllocator1> & lhs, const ::robots_msg::target_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::target_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::target_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::target_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::target_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::target_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::target_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::target_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a34b54ff877258b4705ff283256911e9";
  }

  static const char* value(const ::robots_msg::target_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa34b54ff877258b4ULL;
  static const uint64_t static_value2 = 0x705ff283256911e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::target_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/target_data";
  }

  static const char* value(const ::robots_msg::target_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::target_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 range_l  # left ir sensor\n"
"uint16 range_c  # laser sensor\n"
"uint16 range_r  # right ir sensor \n"
"uint16 n_food\n"
"uint16 n_water\n"
"string targ_id\n"
"string targ_type\n"
"float32 targ_dist\n"
"float32 targ_x\n"
;
  }

  static const char* value(const ::robots_msg::target_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::target_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range_l);
      stream.next(m.range_c);
      stream.next(m.range_r);
      stream.next(m.n_food);
      stream.next(m.n_water);
      stream.next(m.targ_id);
      stream.next(m.targ_type);
      stream.next(m.targ_dist);
      stream.next(m.targ_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::target_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::target_data_<ContainerAllocator>& v)
  {
    s << indent << "range_l: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_l);
    s << indent << "range_c: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_c);
    s << indent << "range_r: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_r);
    s << indent << "n_food: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.n_food);
    s << indent << "n_water: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.n_water);
    s << indent << "targ_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.targ_id);
    s << indent << "targ_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.targ_type);
    s << indent << "targ_dist: ";
    Printer<float>::stream(s, indent + "  ", v.targ_dist);
    s << indent << "targ_x: ";
    Printer<float>::stream(s, indent + "  ", v.targ_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_TARGET_DATA_H
