// Generated by gencpp from file robots_msg/camera.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_CAMERA_H
#define ROBOTS_MSG_MESSAGE_CAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct camera_
{
  typedef camera_<ContainerAllocator> Type;

  camera_()
    : detect(0)
    , id(0)
    , targx(0)
    , targy(0)
    , data()  {
    }
  camera_(const ContainerAllocator& _alloc)
    : detect(0)
    , id(0)
    , targx(0)
    , targy(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _detect_type;
  _detect_type detect;

   typedef uint8_t _id_type;
  _id_type id;

   typedef int16_t _targx_type;
  _targx_type targx;

   typedef int16_t _targy_type;
  _targy_type targy;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::robots_msg::camera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::camera_<ContainerAllocator> const> ConstPtr;

}; // struct camera_

typedef ::robots_msg::camera_<std::allocator<void> > camera;

typedef boost::shared_ptr< ::robots_msg::camera > cameraPtr;
typedef boost::shared_ptr< ::robots_msg::camera const> cameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::camera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::camera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::camera_<ContainerAllocator1> & lhs, const ::robots_msg::camera_<ContainerAllocator2> & rhs)
{
  return lhs.detect == rhs.detect &&
    lhs.id == rhs.id &&
    lhs.targx == rhs.targx &&
    lhs.targy == rhs.targy &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::camera_<ContainerAllocator1> & lhs, const ::robots_msg::camera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::camera_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::camera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b522f111dbe5395cc09d642ba25bfa6";
  }

  static const char* value(const ::robots_msg::camera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b522f111dbe5395ULL;
  static const uint64_t static_value2 = 0xcc09d642ba25bfa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/camera";
  }

  static const char* value(const ::robots_msg::camera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 detect  # 1 : detect, 0 : non detect    \n"
"uint8 id  # id of fiducial\n"
"int16 targx  # coordinate x\n"
"int16 targy  # coordinate y\n"
"string data  # all info in string\n"
;
  }

  static const char* value(const ::robots_msg::camera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::camera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect);
      stream.next(m.id);
      stream.next(m.targx);
      stream.next(m.targy);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::camera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::camera_<ContainerAllocator>& v)
  {
    s << indent << "detect: ";
    Printer<int8_t>::stream(s, indent + "  ", v.detect);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "targx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.targx);
    s << indent << "targy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.targy);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_CAMERA_H
