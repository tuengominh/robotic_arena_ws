// Generated by gencpp from file robots_msg/arm_msg.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_ARM_MSG_H
#define ROBOTS_MSG_MESSAGE_ARM_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robots_msg/xl320.h>
#include <robots_msg/xl320.h>
#include <robots_msg/xl320.h>
#include <robots_msg/xl320.h>
#include <robots_msg/xl320.h>
#include <robots_msg/xl320.h>
#include <robots_msg/jevois.h>

namespace robots_msg
{
template <class ContainerAllocator>
struct arm_msg_
{
  typedef arm_msg_<ContainerAllocator> Type;

  arm_msg_()
    : type()
    , ip()
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , servo0()
    , servo1()
    , servo2()
    , servo3()
    , servo4()
    , servo5()
    , camera()
    , magnet(0)
    , status()  {
    }
  arm_msg_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , ip(_alloc)
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , servo0(_alloc)
    , servo1(_alloc)
    , servo2(_alloc)
    , servo3(_alloc)
    , servo4(_alloc)
    , servo5(_alloc)
    , camera(_alloc)
    , magnet(0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint32_t _port_type;
  _port_type port;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _inst_before_type;
  _inst_before_type inst_before;

   typedef float _battery_type;
  _battery_type battery;

   typedef  ::robots_msg::xl320_<ContainerAllocator>  _servo0_type;
  _servo0_type servo0;

   typedef  ::robots_msg::xl320_<ContainerAllocator>  _servo1_type;
  _servo1_type servo1;

   typedef  ::robots_msg::xl320_<ContainerAllocator>  _servo2_type;
  _servo2_type servo2;

   typedef  ::robots_msg::xl320_<ContainerAllocator>  _servo3_type;
  _servo3_type servo3;

   typedef  ::robots_msg::xl320_<ContainerAllocator>  _servo4_type;
  _servo4_type servo4;

   typedef  ::robots_msg::xl320_<ContainerAllocator>  _servo5_type;
  _servo5_type servo5;

   typedef  ::robots_msg::jevois_<ContainerAllocator>  _camera_type;
  _camera_type camera;

   typedef uint8_t _magnet_type;
  _magnet_type magnet;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robots_msg::arm_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::arm_msg_<ContainerAllocator> const> ConstPtr;

}; // struct arm_msg_

typedef ::robots_msg::arm_msg_<std::allocator<void> > arm_msg;

typedef boost::shared_ptr< ::robots_msg::arm_msg > arm_msgPtr;
typedef boost::shared_ptr< ::robots_msg::arm_msg const> arm_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::arm_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::arm_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::arm_msg_<ContainerAllocator1> & lhs, const ::robots_msg::arm_msg_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.id == rhs.id &&
    lhs.inst_before == rhs.inst_before &&
    lhs.battery == rhs.battery &&
    lhs.servo0 == rhs.servo0 &&
    lhs.servo1 == rhs.servo1 &&
    lhs.servo2 == rhs.servo2 &&
    lhs.servo3 == rhs.servo3 &&
    lhs.servo4 == rhs.servo4 &&
    lhs.servo5 == rhs.servo5 &&
    lhs.camera == rhs.camera &&
    lhs.magnet == rhs.magnet &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::arm_msg_<ContainerAllocator1> & lhs, const ::robots_msg::arm_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::arm_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::arm_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::arm_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::arm_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::arm_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::arm_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::arm_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01914fc38e80d47bed67675890824f7b";
  }

  static const char* value(const ::robots_msg::arm_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01914fc38e80d47bULL;
  static const uint64_t static_value2 = 0xed67675890824f7bULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::arm_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/arm_msg";
  }

  static const char* value(const ::robots_msg::arm_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::arm_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type # type of robot  ”ARM20”\n"
"string ip # address of the robot ESP8866\n"
"uint32 port # Port for comunication\n"
"uint8 id # identyti of robot a uint8_t\n"
"uint8 inst_before # the last instruction runner \n"
"float32 battery # % of the battery\n"
"robots_msg/xl320 servo0 # only arm20\n"
"robots_msg/xl320 servo1 # only arm20\n"
"robots_msg/xl320 servo2 # only arm20\n"
"robots_msg/xl320 servo3 # only arm20\n"
"robots_msg/xl320 servo4 # only arm20\n"
"robots_msg/xl320 servo5 # only arm20\n"
"robots_msg/jevois camera # Aruco info\n"
"uint8 magnet            # status magnet 1 ON 0 OFF\n"
"string status # \"Completed\" or \"Error tipo 3\"\n"
"================================================================================\n"
"MSG: robots_msg/xl320\n"
"uint8  ID\n"
"uint8  LED\n"
"uint16 speed\n"
"uint16 Goal_Position\n"
"uint16 Present_Position\n"
"\n"
"================================================================================\n"
"MSG: robots_msg/jevois\n"
"string type\n"
"uint8 id\n"
"int16 targx #coordinate x\n"
"int16 targy #coordinate y\n"
"int16 targw # weight of fiducial\n"
"int16 targh # hight of fiducial\n"
;
  }

  static const char* value(const ::robots_msg::arm_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::arm_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.id);
      stream.next(m.inst_before);
      stream.next(m.battery);
      stream.next(m.servo0);
      stream.next(m.servo1);
      stream.next(m.servo2);
      stream.next(m.servo3);
      stream.next(m.servo4);
      stream.next(m.servo5);
      stream.next(m.camera);
      stream.next(m.magnet);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::arm_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::arm_msg_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "inst_before: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inst_before);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "servo0: ";
    s << std::endl;
    Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, indent + "  ", v.servo0);
    s << indent << "servo1: ";
    s << std::endl;
    Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, indent + "  ", v.servo1);
    s << indent << "servo2: ";
    s << std::endl;
    Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, indent + "  ", v.servo2);
    s << indent << "servo3: ";
    s << std::endl;
    Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, indent + "  ", v.servo3);
    s << indent << "servo4: ";
    s << std::endl;
    Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, indent + "  ", v.servo4);
    s << indent << "servo5: ";
    s << std::endl;
    Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, indent + "  ", v.servo5);
    s << indent << "camera: ";
    s << std::endl;
    Printer< ::robots_msg::jevois_<ContainerAllocator> >::stream(s, indent + "  ", v.camera);
    s << indent << "magnet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.magnet);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_ARM_MSG_H
