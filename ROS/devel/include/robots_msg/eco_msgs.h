// Generated by gencpp from file robots_msg/eco_msgs.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_ECO_MSGS_H
#define ROBOTS_MSG_MESSAGE_ECO_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robots_msg/camera.h>

namespace robots_msg
{
template <class ContainerAllocator>
struct eco_msgs_
{
  typedef eco_msgs_<ContainerAllocator> Type;

  eco_msgs_()
    : type()
    , ip()
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , range_l(0)
    , range_c(0)
    , range_r(0)
    , compas(0)
    , pos_motor1(0)
    , pos_motor2(0)
    , jevois()
    , status()  {
    }
  eco_msgs_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , ip(_alloc)
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , range_l(0)
    , range_c(0)
    , range_r(0)
    , compas(0)
    , pos_motor1(0)
    , pos_motor2(0)
    , jevois(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint32_t _port_type;
  _port_type port;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _inst_before_type;
  _inst_before_type inst_before;

   typedef float _battery_type;
  _battery_type battery;

   typedef uint16_t _range_l_type;
  _range_l_type range_l;

   typedef uint16_t _range_c_type;
  _range_c_type range_c;

   typedef uint16_t _range_r_type;
  _range_r_type range_r;

   typedef int16_t _compas_type;
  _compas_type compas;

   typedef int16_t _pos_motor1_type;
  _pos_motor1_type pos_motor1;

   typedef int16_t _pos_motor2_type;
  _pos_motor2_type pos_motor2;

   typedef  ::robots_msg::camera_<ContainerAllocator>  _jevois_type;
  _jevois_type jevois;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robots_msg::eco_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::eco_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct eco_msgs_

typedef ::robots_msg::eco_msgs_<std::allocator<void> > eco_msgs;

typedef boost::shared_ptr< ::robots_msg::eco_msgs > eco_msgsPtr;
typedef boost::shared_ptr< ::robots_msg::eco_msgs const> eco_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::eco_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::eco_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::eco_msgs_<ContainerAllocator1> & lhs, const ::robots_msg::eco_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.id == rhs.id &&
    lhs.inst_before == rhs.inst_before &&
    lhs.battery == rhs.battery &&
    lhs.range_l == rhs.range_l &&
    lhs.range_c == rhs.range_c &&
    lhs.range_r == rhs.range_r &&
    lhs.compas == rhs.compas &&
    lhs.pos_motor1 == rhs.pos_motor1 &&
    lhs.pos_motor2 == rhs.pos_motor2 &&
    lhs.jevois == rhs.jevois &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::eco_msgs_<ContainerAllocator1> & lhs, const ::robots_msg::eco_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::eco_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::eco_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::eco_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::eco_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::eco_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::eco_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::eco_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b06ae61beeb797a599af8e0764bf224c";
  }

  static const char* value(const ::robots_msg::eco_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb06ae61beeb797a5ULL;
  static const uint64_t static_value2 = 0x99af8e0764bf224cULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::eco_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/eco_msgs";
  }

  static const char* value(const ::robots_msg::eco_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::eco_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type  # type of robot “ECOLOGY20”\n"
"string ip  # address of the robot ESP8866\n"
"uint32 port  # port for comunication\n"
"uint8 id  # uint8_t id of the robot\n"
"uint8 inst_before  # the last instruction runner \n"
"float32 battery  # % of the battery\n"
"uint16 range_l  # left ir sensor\n"
"uint16 range_c  # laser sensor\n"
"uint16 range_r  # right ir sensor \n"
"int16 compas  # heading\n"
"int16 pos_motor1  # position motor left\n"
"int16 pos_motor2  # position motor right \n"
"robots_msg/camera jevois  # Aruco info\n"
"string status  # \"Completed\" or \"Error type 1\"\n"
"\n"
"================================================================================\n"
"MSG: robots_msg/camera\n"
"int8 detect  # 1 : detect, 0 : non detect    \n"
"uint8 id  # id of fiducial\n"
"int16 targx  # coordinate x\n"
"int16 targy  # coordinate y\n"
"string data  # all info in string\n"
;
  }

  static const char* value(const ::robots_msg::eco_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::eco_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.id);
      stream.next(m.inst_before);
      stream.next(m.battery);
      stream.next(m.range_l);
      stream.next(m.range_c);
      stream.next(m.range_r);
      stream.next(m.compas);
      stream.next(m.pos_motor1);
      stream.next(m.pos_motor2);
      stream.next(m.jevois);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eco_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::eco_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::eco_msgs_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "inst_before: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inst_before);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "range_l: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_l);
    s << indent << "range_c: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_c);
    s << indent << "range_r: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_r);
    s << indent << "compas: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compas);
    s << indent << "pos_motor1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos_motor1);
    s << indent << "pos_motor2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos_motor2);
    s << indent << "jevois: ";
    s << std::endl;
    Printer< ::robots_msg::camera_<ContainerAllocator> >::stream(s, indent + "  ", v.jevois);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_ECO_MSGS_H
