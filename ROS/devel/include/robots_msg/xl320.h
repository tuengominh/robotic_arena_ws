// Generated by gencpp from file robots_msg/xl320.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_XL320_H
#define ROBOTS_MSG_MESSAGE_XL320_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_msg
{
template <class ContainerAllocator>
struct xl320_
{
  typedef xl320_<ContainerAllocator> Type;

  xl320_()
    : ID(0)
    , LED(0)
    , speed(0)
    , Goal_Position(0)
    , Present_Position(0)  {
    }
  xl320_(const ContainerAllocator& _alloc)
    : ID(0)
    , LED(0)
    , speed(0)
    , Goal_Position(0)
    , Present_Position(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint8_t _LED_type;
  _LED_type LED;

   typedef uint16_t _speed_type;
  _speed_type speed;

   typedef uint16_t _Goal_Position_type;
  _Goal_Position_type Goal_Position;

   typedef uint16_t _Present_Position_type;
  _Present_Position_type Present_Position;





  typedef boost::shared_ptr< ::robots_msg::xl320_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::xl320_<ContainerAllocator> const> ConstPtr;

}; // struct xl320_

typedef ::robots_msg::xl320_<std::allocator<void> > xl320;

typedef boost::shared_ptr< ::robots_msg::xl320 > xl320Ptr;
typedef boost::shared_ptr< ::robots_msg::xl320 const> xl320ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::xl320_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::xl320_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::xl320_<ContainerAllocator1> & lhs, const ::robots_msg::xl320_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.LED == rhs.LED &&
    lhs.speed == rhs.speed &&
    lhs.Goal_Position == rhs.Goal_Position &&
    lhs.Present_Position == rhs.Present_Position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::xl320_<ContainerAllocator1> & lhs, const ::robots_msg::xl320_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::xl320_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::xl320_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::xl320_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::xl320_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::xl320_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::xl320_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::xl320_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67fe2fb91485e549cd0ff16b0e5b40e4";
  }

  static const char* value(const ::robots_msg::xl320_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67fe2fb91485e549ULL;
  static const uint64_t static_value2 = 0xcd0ff16b0e5b40e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::xl320_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/xl320";
  }

  static const char* value(const ::robots_msg::xl320_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::xl320_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  ID\n"
"uint8  LED\n"
"uint16 speed\n"
"uint16 Goal_Position\n"
"uint16 Present_Position\n"
;
  }

  static const char* value(const ::robots_msg::xl320_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::xl320_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.LED);
      stream.next(m.speed);
      stream.next(m.Goal_Position);
      stream.next(m.Present_Position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xl320_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::xl320_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::xl320_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "LED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED);
    s << indent << "speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "Goal_Position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Goal_Position);
    s << indent << "Present_Position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Present_Position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_XL320_H
