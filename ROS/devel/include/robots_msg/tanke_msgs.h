// Generated by gencpp from file robots_msg/tanke_msgs.msg
// DO NOT EDIT!


#ifndef ROBOTS_MSG_MESSAGE_TANKE_MSGS_H
#define ROBOTS_MSG_MESSAGE_TANKE_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robots_msg/camera.h>
#include <robots_msg/plat.h>

namespace robots_msg
{
template <class ContainerAllocator>
struct tanke_msgs_
{
  typedef tanke_msgs_<ContainerAllocator> Type;

  tanke_msgs_()
    : type()
    , ip()
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , range_c(0)
    , compas(0)
    , motor1(0)
    , motor3(0)
    , motor2(0)
    , motor4(0)
    , jevois()
    , plat()
    , status()  {
    }
  tanke_msgs_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , ip(_alloc)
    , port(0)
    , id(0)
    , inst_before(0)
    , battery(0.0)
    , range_c(0)
    , compas(0)
    , motor1(0)
    , motor3(0)
    , motor2(0)
    , motor4(0)
    , jevois(_alloc)
    , plat(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint32_t _port_type;
  _port_type port;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _inst_before_type;
  _inst_before_type inst_before;

   typedef float _battery_type;
  _battery_type battery;

   typedef uint16_t _range_c_type;
  _range_c_type range_c;

   typedef int16_t _compas_type;
  _compas_type compas;

   typedef uint8_t _motor1_type;
  _motor1_type motor1;

   typedef uint8_t _motor3_type;
  _motor3_type motor3;

   typedef uint8_t _motor2_type;
  _motor2_type motor2;

   typedef uint8_t _motor4_type;
  _motor4_type motor4;

   typedef  ::robots_msg::camera_<ContainerAllocator>  _jevois_type;
  _jevois_type jevois;

   typedef  ::robots_msg::plat_<ContainerAllocator>  _plat_type;
  _plat_type plat;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robots_msg::tanke_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_msg::tanke_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct tanke_msgs_

typedef ::robots_msg::tanke_msgs_<std::allocator<void> > tanke_msgs;

typedef boost::shared_ptr< ::robots_msg::tanke_msgs > tanke_msgsPtr;
typedef boost::shared_ptr< ::robots_msg::tanke_msgs const> tanke_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_msg::tanke_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_msg::tanke_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_msg::tanke_msgs_<ContainerAllocator1> & lhs, const ::robots_msg::tanke_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.ip == rhs.ip &&
    lhs.port == rhs.port &&
    lhs.id == rhs.id &&
    lhs.inst_before == rhs.inst_before &&
    lhs.battery == rhs.battery &&
    lhs.range_c == rhs.range_c &&
    lhs.compas == rhs.compas &&
    lhs.motor1 == rhs.motor1 &&
    lhs.motor3 == rhs.motor3 &&
    lhs.motor2 == rhs.motor2 &&
    lhs.motor4 == rhs.motor4 &&
    lhs.jevois == rhs.jevois &&
    lhs.plat == rhs.plat &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_msg::tanke_msgs_<ContainerAllocator1> & lhs, const ::robots_msg::tanke_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_msg::tanke_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_msg::tanke_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::tanke_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_msg::tanke_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::tanke_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_msg::tanke_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_msg::tanke_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa6b09dbb6438940f27323d40a64c654";
  }

  static const char* value(const ::robots_msg::tanke_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa6b09dbb6438940ULL;
  static const uint64_t static_value2 = 0xf27323d40a64c654ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_msg::tanke_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_msg/tanke_msgs";
  }

  static const char* value(const ::robots_msg::tanke_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_msg::tanke_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type  # type of robot “TANKE20”\n"
"string ip  # address of the robot ESP8866\n"
"uint32 port  # port for communication\n"
"uint8 id  # uint8_t id of the robot\n"
"uint8 inst_before  # the last instruction runner \n"
"float32 battery  # % of the battery\n"
"uint16 range_c  # laser sensor\n"
"int16 compas  # heading\n"
"uint8 motor1  # 0 : stop, 1 : CW, 2 : CCW FL\n"
"uint8 motor3  # 0 : stop, 1 : CW, 2 : CCW BL\n"
"uint8 motor2  # 0 : stop, 1 : CW, 2 : CCW FR\n"
"uint8 motor4  # 0 : stop, 1 : CW, 2 : CCW BR\n"
"robots_msg/camera jevois  # Aruco info\n"
"robots_msg/plat plat\n"
"string status  # \"Completed\" or \"Error type 2\"\n"
"\n"
"================================================================================\n"
"MSG: robots_msg/camera\n"
"int8 detect  # 1 : detect, 0 : non detect    \n"
"uint8 id  # id of fiducial\n"
"int16 targx  # coordinate x\n"
"int16 targy  # coordinate y\n"
"string data  # all info in string\n"
"\n"
"================================================================================\n"
"MSG: robots_msg/plat\n"
"string action  # \"MOVING_UP\", \"MOVING_DOWN\", \"STOP\"\n"
"uint8 status  # 1 : up, 0 : down\n"
;
  }

  static const char* value(const ::robots_msg::tanke_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_msg::tanke_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.ip);
      stream.next(m.port);
      stream.next(m.id);
      stream.next(m.inst_before);
      stream.next(m.battery);
      stream.next(m.range_c);
      stream.next(m.compas);
      stream.next(m.motor1);
      stream.next(m.motor3);
      stream.next(m.motor2);
      stream.next(m.motor4);
      stream.next(m.jevois);
      stream.next(m.plat);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tanke_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_msg::tanke_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_msg::tanke_msgs_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "inst_before: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inst_before);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "range_c: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_c);
    s << indent << "compas: ";
    Printer<int16_t>::stream(s, indent + "  ", v.compas);
    s << indent << "motor1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1);
    s << indent << "motor3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor3);
    s << indent << "motor2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2);
    s << indent << "motor4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor4);
    s << indent << "jevois: ";
    s << std::endl;
    Printer< ::robots_msg::camera_<ContainerAllocator> >::stream(s, indent + "  ", v.jevois);
    s << indent << "plat: ";
    s << std::endl;
    Printer< ::robots_msg::plat_<ContainerAllocator> >::stream(s, indent + "  ", v.plat);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_MSG_MESSAGE_TANKE_MSGS_H
